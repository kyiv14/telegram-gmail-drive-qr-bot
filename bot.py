import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import re
import cv2
import numpy as np
import io
from PIL import Image

TOKEN = "7490249052:AAEaldElMOFFJwn9WIvuSR0bx6tFaebeR0k"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
"
        "/gmail ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Gmail-–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
"
        "/drive ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ Google –î–∏—Å–∫–∞
"
        "/qr ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏"
    )

async def gmail_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Gmail:")

async def drive_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª Google –î–∏—Å–∫–∞.")

async def qr_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if "@gmail.com" in text:
        prefix = text.replace("@gmail.com", "")
        variants = [f"{prefix}@gmail.com", f"{prefix}@googlemail.com"]
        for i in range(1, len(prefix)):
            variants.append(f"{prefix[:i]}.{prefix[i:]}@gmail.com")
        reply_text = "\n".join(variants)
        buttons = [
            [InlineKeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data="copy_gmail")],
            [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å .txt", callback_data="txt_gmail")],
            [InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="csv_gmail")]
        ]
        await update.message.reply_text(reply_text, reply_markup=InlineKeyboardMarkup(buttons))
    elif "drive.google.com" in text:
        file_id = None
        match = re.search(r"/d/([a-zA-Z0-9_-]+)", text)
        if match:
            file_id = match.group(1)
        else:
            alt_match = re.search(r"id=([a-zA-Z0-9_-]+)", text)
            if alt_match:
                file_id = alt_match.group(1)
        if file_id:
            link = f"https://drive.google.com/uc?export=download&id={file_id}"
            buttons = [
                [InlineKeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_link")],
                [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url=link)]
            ]
            await update.message.reply_text(link, reply_markup=InlineKeyboardMarkup(buttons))
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ñ–∞–π–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏.")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å Gmail –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google –î–∏—Å–∫.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = await update.message.photo[-1].get_file()
    file_bytes = await photo.download_as_bytearray()
    np_arr = np.frombuffer(file_bytes, np.uint8)
    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    detector = cv2.QRCodeDetector()
    data, _, _ = detector.detectAndDecode(img)
    if data:
        buttons = [
            [InlineKeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_qr")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url=data)]
        ]
        await update.message.reply_text(f"QR-–∫–æ–¥: {data}", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "copy_gmail":
        await query.edit_message_text("–°–∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.")
    elif query.data == "txt_gmail":
        content = query.message.text.replace("\n", "\r\n")
        await query.message.reply_document(document=io.BytesIO(content.encode()), filename="gmail_variants.txt")
    elif query.data == "csv_gmail":
        content = query.message.text.replace("\n", "\n")
        csv_data = content.replace("\n", ",\n")
        await query.message.reply_document(document=io.BytesIO(csv_data.encode()), filename="gmail_variants.csv")
    elif query.data == "copy_link":
        await query.edit_message_text("–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é.")
    elif query.data == "copy_qr":
        await query.edit_message_text("–°–∫–æ–ø–∏—Ä—É–π QR-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ä—É—á–Ω—É—é.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("gmail", gmail_command))
    app.add_handler(CommandHandler("drive", drive_command))
    app.add_handler(CommandHandler("qr", qr_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()