
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import re
import numpy as np
import cv2
from PIL import Image
import io

TOKEN = "7490249052:AAEaldElMOFFJwn9WIvuSR0bx6tFaebeR0k"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/gmail, /link, /qr, /start, /help")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–°–ø—Ä–∞–≤–∫–∞: —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π Gmail, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Å—ã–ª–æ–∫ –∏ QR.")

async def gmail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Gmail –∞–¥—Ä–µ—Å.")

async def handle_gmail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        email = update.message.text.strip()
        if "@gmail.com" in email:
            prefix = email.split("@")[0]
            variants = [f"{prefix.replace('.', '')[:i]}.{prefix.replace('.', '')[i:]}@gmail.com"
                        for i in range(1, len(prefix.replace('.', '')))]
            reply = "\n".join(set(variants[:20])) or "–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await update.message.reply_text(reply)
        else:
            await update.message.reply_text("–≠—Ç–æ –Ω–µ Gmail –∞–¥—Ä–µ—Å.")

async def link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É Google –î–∏—Å–∫–∞.")

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    url = update.message.text.strip()
    match = re.search(r"https://drive.google.com/file/d/([\w-]+)", url)
    if match:
        file_id = match.group(1)
        direct_link = f"https://drive.google.com/uc?export=download&id={file_id}"
        await update.message.reply_text(direct_link)
    else:
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

async def qr(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    photo = update.message.photo[-1]
    photo_file = await photo.get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    image = Image.open(io.BytesIO(photo_bytes)).convert('RGB')
    open_cv_image = np.array(image)
    open_cv_image = open_cv_image[:, :, ::-1].copy()
    detector = cv2.QRCodeDetector()
    data, _, _ = detector.detectAndDecode(open_cv_image)
    if data:
        await update.message.reply_text(f"QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç: {data}")
    else:
        await update.message.reply_text("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("gmail", gmail))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("@gmail.com"), handle_gmail))
    app.add_handler(CommandHandler("link", link))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("drive.google.com"), handle_link))
    app.add_handler(CommandHandler("qr", qr))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()

if __name__ == "__main__":
    main()
