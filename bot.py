
import logging
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import random
import string
import os
import cv2
import numpy as np
from PIL import Image
import io
import httpx

logging.basicConfig(level=logging.INFO)
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

def generate_gmail():
    user = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
    return f"{user}@gmail.com"

def get_direct_link(file_id: str) -> str:
    return f"https://drive.google.com/uc?export=download&id={file_id}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n1Ô∏è‚É£ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Gmail\n2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É —Å Google –î–∏—Å–∫–∞\n3Ô∏è‚É£ –ü—Ä–æ—á–∏—Ç–∞—Ç—å QR –ø–æ —Ñ–æ—Ç–æ\n\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ ID —Ñ–∞–π–ª–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /gmail")

async def gmail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = generate_gmail()
    await update.message.reply_text(f"üìß Gmail: `{email}`", parse_mode="Markdown")

async def drive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ü—Ä–∏—à–ª–∏ ID —Ñ–∞–π–ª–∞ Google Drive, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/drive 1x2x3x4x5`", parse_mode="Markdown")
        return
    file_id = context.args[0]
    direct_link = get_direct_link(file_id)
    await update.message.reply_text(f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞:\n{direct_link}")

async def scan_qr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º.")
        return

    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    np_arr = np.frombuffer(photo_bytes, np.uint8)
    image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    detector = cv2.QRCodeDetector()
    data, points, _ = detector.detectAndDecode(image)

    if data:
        await update.message.reply_text(f"‚úÖ QR-–∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:\n{data}")
    else:
        await update.message.reply_text("‚ùå QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("gmail", gmail))
    app.add_handler(CommandHandler("drive", drive))
    app.add_handler(MessageHandler(filters.PHOTO, scan_qr))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
