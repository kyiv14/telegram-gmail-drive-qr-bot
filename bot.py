import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import httpx
import numpy as np
import cv2
from PIL import Image
from io import BytesIO
import re

TOKEN = "7490249052:AAEaldElMOFFJwn9WIvuSR0bx6tFaebeR0k"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Application.builder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
"
        "/gmail ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Gmail-–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
"
        "/link ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ Google –î–∏—Å–∫–∞
"
        "/qr ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏"
    )

async def gmail_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ Gmail –∞–¥—Ä–µ—Å:")
    return

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if re.match(r"^[\w.-]+@gmail\.com$", text, re.IGNORECASE):
        name = text.split("@")[0]
        variants = [f"{name.replace('.', '')[:i]}.{name.replace('.', '')[i:]}@gmail.com" for i in range(1, len(name))]
        await update.message.reply_text("\n".join(variants))
    else:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Gmail –∞–¥—Ä–µ—Å.")

async def link_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É Google –î–∏—Å–∫–∞.")

async def qr_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    byte_data = await file.download_as_bytearray()
    nparr = np.frombuffer(byte_data, np.uint8)
    img_np = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    detector = cv2.QRCodeDetector()
    data, bbox, _ = detector.detectAndDecode(img_np)
    if data:
        await update.message.reply_text(f"QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç:
{data}")
    else:
        await update.message.reply_text("QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gmail", gmail_command))
app.add_handler(CommandHandler("link", link_command))
app.add_handler(CommandHandler("qr", qr_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

if __name__ == "__main__":
    app.run_polling()
